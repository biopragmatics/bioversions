# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
isolated_build = true
envlist =
    # always keep coverage-clean first
    #coverage-clean
    # code linters/stylers
    manifest
    flake8
    pyroma
    #mypy
    # documentation linters/checkers
    #doc8
    #docs
    # the actual tests
    py
    # always keep coverage-report last
    #coverage-report

[testenv]
commands = coverage run -p -m pytest --durations=20 {posargs:tests}
passenv =
    HOME
deps =
    coverage
    pytest
allowlist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir
    /usr/bin/cat
    /usr/bin/cp
    /usr/bin/mkdir
    /usr/bin/git
    /usr/local/bin/git

[testenv:update]
description = Update the Bioversions database
commands =
    python -m bioversions update
    python -m bioversions.charts
usedevelop = true
extras =
    twitter
    slack
    charts

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest

[testenv:pre-commit]
skip_install = true
deps =
    pre-commit
commands = pre-commit run -a
usedevelop = true
description = Run the pre-commit tool

[testenv:lint]
deps =
    black
    isort
skip_install = true
commands =
    black src/ tests/
    isort src/ tests/
description = Run black.

[testenv:flake8]
skip_install = true
deps =
    darglint
    flake8<5.0.0
    # flake8-bandit
    flake8-black
    flake8-bugbear
    flake8-colors
    flake8-docstrings
    flake8-isort
    pep8-naming
    pydocstyle
commands =
    flake8 src/bioversions/ tests/
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming).

[testenv:mypy]
deps = mypy
skip_install = true
commands = mypy --install-types --non-interactive --ignore-missing-imports src/bioversions/
description = Run the mypy tool to check static typing on the project.

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=10 .
description = Run the pyroma tool to check the package friendliness of the project.

[testenv:doc8]
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/source/
description = Run the doc8 tool to check the style of the RST files in the project docs.

[testenv:docs]
changedir = docs
extras =
    docs
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    python -m sphinx -W -b html -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    python -m sphinx -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bump2version {posargs}
skip_install = true
passenv = HOME
deps =
    bump2version

[testenv:bumpversion-release]
commands = bump2version release --tag
skip_install = true
passenv = HOME
deps =
    bump2version

[testenv:build]
skip_install = true
deps =
    wheel
    build
commands =
    python -m build --sdist --wheel --no-isolation

[testenv:release]
skip_install = true
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --non-interactive --skip-existing dist/*

[testenv:finish]
skip_install = true
passenv =
    HOME
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:release]deps}
    bump2version
commands =
    bump2version release --tag
    {[testenv:release]commands}
    git push --tags
    bump2version patch
    git push
allowlist_externals =
    /usr/bin/git

